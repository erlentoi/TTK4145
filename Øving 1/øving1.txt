# Reasons for concurrency and parallelism


 ### What is concurrency? What is parallelism? What's the difference?

   Concurrency is when more than one task is run intertwined, that is,
 the CPU may switch between the different task without neccesairly completing
 them.
 Parallellism is running more than one task simultaneously using multiple cores/CPUs.

 Fra stackoverflow:
 Anta at programmet har 2 trÃ¥der(threads)
 ========================================================
 Concurrency                 Concurrency + parallelism
 (Single-Core CPU)           (Multi-Core CPU)
  ___                         ___ ___
 |th1|                       |th1|th2|
 |   |                       |   |___|
 |___|___                    |   |___
     |th2|                   |___|th2|
  ___|___|                    ___|___|
 |th1|                       |th1|
 |___|___                    |   |___
     |th2|                   |   |th2|
 ========================================================


 ### Why have machines become increasingly multicore in the past decade?
   CPU speeds have not increased because of massive heat developed for higher clock speeds.
 This has been compensated for by including more cores in CPUs and developing programs
 for multi-threading (taking advantage of muliple cores)

 ### What kinds of problems motivates the need for concurrent execution?
 (Or phrased differently: What problems do concurrency help in solving?)
   Increased performance.  When problems must be solved within a time period, or
   when multiple tasks needs to be solved (possibly) at the same time instant.


 ### Does creating concurrent programs make the programmer's life easier? Harder? Maybe both?
 (Come back to this after you have worked on part 4 of this exercise)

 ### What are the differences between processes, threads, green threads, and coroutines?
 > A process handles big tasks such as executing programs, while threads are used for
 smaller tasks. Processes contain threads. Green threads are threads that are emulated by
 an program without using the OS. Coroutines are simmilar to the concurrency
  concept but they are dependent on each other and share variables. In addition
  only 1 coruotine can run at a time and a coroutine stops only when its told to.


 ### Which one of these do `pthread_create()` (C/POSIX), `threading.Thread()` (Python), `go` (Go) create?
  Threads

 ### How does pythons Global Interpreter Lock (GIL) influence the way a python Thread behaves?
 > Python's memory managment is not thread-safe by default. GIL enforces mutex and
 makes it impossible to develop multi-thread software.

 ### With this in mind: What is the workaround for the GIL (Hint: it's another module)?
 > Use multiple processes instead of threads

 ### What does `func GOMAXPROCS(n int) int` change?
 > GOMAXPROCS sets the maximum number of CPUs that can be executing simultaneously and returns the previous setting
